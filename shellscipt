Here's a universal bridge creation script that works across different Linux distributions:

```bash
#!/bin/bash

# =========================================================
# Universal Network Bridge Configuration Script
# =========================================================
#
# Author:  Sikander Kanojia
# Created: $(date +"%Y-%m-%d")
# Version: 1.0
#
# Description:
# This script automates the creation of a permanent network bridge
# across different Linux distributions. Supports:
#   - Ubuntu/Debian
#   - CentOS/RHEL 7/8
#   - Rocky Linux
#   - AlmaLinux
#
# The script performs:
#   1. OS Detection
#   2. Network information collection
#   3. Configuration backup
#   4. Bridge creation
#   5. Permanent configuration
#
# Usage: 
#   sudo ./create_universal_bridge.sh
#
# Requirements:
#   - Root privileges
#   - bridge-utils package
# =========================================================

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo "Please run as root"
    exit 1
fi

# Get current date for backup
DATE=$(date +%Y%m%d_%H%M%S)

# Detect OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
    VERSION_ID=$VERSION_ID
else
    echo "Cannot detect OS"
    exit 1
fi

# Get primary interface name (excluding lo)
INTERFACE=$(ip route | grep default | awk '{print $5}')

# Collect network information
IP_ADDR=$(ip addr show $INTERFACE | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)
NETMASK=$(ip addr show $INTERFACE | grep 'inet ' | awk '{print $2}' | cut -d/ -f2)
GATEWAY=$(ip route | grep default | awk '{print $3}')
NETWORK=$(ip route | grep $INTERFACE | grep -v default | awk '{print $1}' | head -1)

# Install bridge-utils if not present
case $OS in
    "ubuntu"|"debian")
        apt-get update -y
        apt-get install -y bridge-utils
        ;;
    "centos"|"rhel"|"rocky"|"almalinux")
        yum install -y bridge-utils
        ;;
esac

# Create bridge configuration based on OS
case $OS in
    "ubuntu"|"debian")
        if [ -d "/etc/netplan" ]; then
            # Ubuntu with netplan
            NETPLAN_FILE=$(ls /etc/netplan/*.yaml | head -n1)
            cp $NETPLAN_FILE "${NETPLAN_FILE}.backup_${DATE}"
            
            cat > $NETPLAN_FILE << EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    $INTERFACE:
      dhcp4: no
  bridges:
    br0:
      interfaces: [$INTERFACE]
      addresses: [$IP_ADDR/$NETMASK]
      gateway4: $GATEWAY
      nameservers:
        addresses: [8.8.8.8, 8.8.4.4]
      parameters:
        stp: true
        forward-delay: 4
      dhcp4: no
EOF
            netplan apply
        else
            # Ubuntu/Debian with interfaces
            cp /etc/network/interfaces "/etc/network/interfaces.backup_${DATE}"
            
            cat > /etc/network/interfaces << EOF
auto lo
iface lo inet loopback

auto br0
iface br0 inet static
    address $IP_ADDR
    netmask $NETMASK
    gateway $GATEWAY
    bridge_ports $INTERFACE
    bridge_stp on
    bridge_fd 4
    dns-nameservers 8.8.8.8 8.8.4.4

auto $INTERFACE
iface $INTERFACE inet manual
EOF
            systemctl restart networking
        fi
        ;;
        
    "centos"|"rhel"|"rocky"|"almalinux")
        # Backup original interface config
        cp /etc/sysconfig/network-scripts/ifcfg-$INTERFACE "/etc/sysconfig/network-scripts/ifcfg-${INTERFACE}.backup_${DATE}"
        
        # Create bridge config
        cat > /etc/sysconfig/network-scripts/ifcfg-br0 << EOF
DEVICE=br0
TYPE=Bridge
BOOTPROTO=none
IPADDR=$IP_ADDR
PREFIX=$NETMASK
GATEWAY=$GATEWAY
DNS1=8.8.8.8
DNS2=8.8.4.4
ONBOOT=yes
DELAY=4
STP=on
EOF
        
        # Modify original interface config
        cat > /etc/sysconfig/network-scripts/ifcfg-$INTERFACE << EOF
DEVICE=$INTERFACE
TYPE=Ethernet
BOOTPROTO=none
ONBOOT=yes
BRIDGE=br0
EOF
        
        systemctl restart network
        ;;
esac

# Verify bridge creation
echo "Verifying bridge configuration..."
ip link show br0

echo "Bridge configuration complete. Backup files created with suffix .backup_${DATE}"
echo "If you experience any issues, restore the backup files and restart networking"

# Print bridge status
bridge link show
ip addr show br0
```

To use this script:

1. Save it as `create_universal_bridge.sh`
2. Make it executable: `chmod +x create_universal_bridge.sh`
3. Run as root: `sudo ./create_universal_bridge.sh`

Key features of this universal script:

1. OS Detection: Automatically detects the distribution and applies appropriate configuration
2. Package Management: Installs required packages based on the OS
3. Multiple Configuration Methods:
   - Supports netplan (modern Ubuntu)
   - Supports /etc/network/interfaces (older Ubuntu/Debian)
   - Supports network-scripts (CentOS/RHEL/Rocky/Alma)
4. Automatic Network Detection:
   - Uses `ip` commands instead of deprecated `ifconfig`
   - Automatically detects primary interface and network settings
5. Backup Creation: Creates dated backups of all modified files
6. Verification: Shows bridge status after creation

Important notes:
- Always test in a safe environment first
- Ensure you have physical or out-of-band access to the server
- Backups are created with timestamp suffixes
- Uses Google DNS by default (8.8.8.8, 8.8.4.4)
- Enables STP with 4-second forward delay

# Advanced Git and GitHub Interview Questions
## Author: Sikander Kanojia
## Date: $(date +"%Y-%m-%d")
## Version: 2.0

## Basic Level Questions

### 1. What is Git and why is it used?
**Answer:**
Git is a distributed version control system that:
- Tracks changes in source code during development
- Enables multiple developers to work simultaneously
- Maintains history of all changes
- Allows branching and merging of code
- Works offline and is fast for most operations
- Ensures data integrity using SHA-1 hashes

### 2. What are the key components of Git?
**Answer:**
1. **Working Directory**: Where you modify files
2. **Staging Area (Index)**: Where you prepare commits
3. **Local Repository**: Contains all commits (.git folder)
4. **Remote Repository**: Server-side repository (like GitHub)

### 3. Explain the Git workflow
**Answer:**
Basic Git workflow consists of:
1. `git clone/init` - Start a repository
2. `git add` - Stage changes
3. `git commit` - Save changes locally
4. `git push` - Upload to remote
5. `git pull` - Download and merge changes

## Intermediate Level Questions

### 4. What's the difference between Git merge strategies?
**Answer:**
Common merge strategies:
1. **Fast-forward**: When no additional work has been done on the base branch
2. **Recursive**: Default strategy for merging branches with divergent history
3. **Octopus**: For merging multiple branches
4. **Ours**: Forces conflicting changes to be auto-resolved using our branch
5. **Theirs**: Forces conflicting changes to be auto-resolved using their branch

### 5. Explain Git rebase and its dangers
**Answer:**
- **Purpose**: Reapplies commits on top of another base
- **Command**: `git rebase <branch>`
- **Dangers**:
  - Rewrites commit history
  - Can cause conflicts in shared branches
  - Should not be used on public branches
- **Golden Rule**: Never rebase shared branches

### 6. What are Git hooks and their types?
**Answer:**
Git hooks are scripts that run automatically before or after Git commands:
1. **Pre-commit**: Runs before commit is created
2. **Post-commit**: Runs after commit is created
3. **Pre-push**: Runs before push is executed
4. **Post-receive**: Runs on remote after push is received
Common uses:
- Code linting
- Running tests
- Checking commit message format
- Triggering deployments

## Advanced Level Questions

### 7. Explain Git internals and objects
**Answer:**
Git stores data in four types of objects:
1. **Blob**: Stores file content
2. **Tree**: Stores directory structure
3. **Commit**: Stores commit information
4. **Tag**: Stores tag information
Each object is identified by SHA-1 hash.

### 8. How do you handle large files in Git?
**Answer:**
Options for handling large files:
1. **Git LFS (Large File Storage)**:
   - Stores large files separately
   - Uses pointers in repository
   - Better performance
2. **git-annex**:
   - Manages files without checking content into Git
3. **Submodules**:
   - Separate repositories for large components
Best practices:
- Use .gitignore for build artifacts
- Use Git LFS for binary files
- Split large repositories if possible

### 9. Explain Git reflog and its importance
**Answer:**
- Git reflog tracks all reference changes
- Useful for:
  - Recovering deleted commits
  - Undoing reset operations
  - Finding lost work
- Commands:
  - `git reflog show`
  - `git reflog expire`
  - `git reflog delete`

### 10. Advanced branching strategies
**Answer:**
1. **GitFlow**:
   - master/main
   - develop
   - feature/*
   - release/*
   - hotfix/*

2. **GitHub Flow**:
   - main branch
   - feature branches
   - Pull Request workflow

3. **Trunk-Based Development**:
   - Short-lived feature branches
   - Frequent integration to main
   - Feature flags for incomplete work

## Expert Level Questions

### 11. How do you optimize Git repository performance?
**Answer:**
1. **Repository optimization**:
   - `git gc` - Garbage collection
   - `git prune` - Remove unreachable objects
   - `git repack` - Optimize pack files

2. **Working practices**:
   - Regular cleaning of merged branches
   - Using shallow clones when appropriate
   - Implementing Git LFS for large files
   - Using sparse-checkout for monorepos

### 12. Explain Git cherry-pick and when to use it
**Answer:**
- **Purpose**: Apply specific commits to current branch
- **Usage**: `git cherry-pick <commit-hash>`
- **Common scenarios**:
  - Applying hotfixes across branches
  - Moving specific features to release
  - Recovering specific commits
- **Cautions**:
  - Creates duplicate commits
  - Can cause conflicts
  - Should be used sparingly

### 13. Advanced Git troubleshooting
**Answer:**
1. **Debugging techniques**:
   - `git bisect` for finding bugs
   - `git blame` for code archaeology
   - `git log --grep` for commit search
   - `git fsck` for repository integrity

2. **Common issues**:
   - Detached HEAD state
   - Merge conflicts
   - Lost commits
   - Repository corruption

### 14. GitHub-specific features and best practices
**Answer:**
1. **GitHub Actions**:
   - CI/CD automation
   - Custom workflows
   - Matrix testing

2. **Security features**:
   - Dependabot alerts
   - Code scanning
   - Secret scanning
   - Security policies

3. **Collaboration features**:
   - Pull Request templates
   - Issue templates
   - Project boards
   - GitHub Discussions

### 15. Git and DevOps integration
**Answer:**
1. **Continuous Integration**:
   - Automated testing
   - Build verification
   - Code quality checks

2. **Continuous Deployment**:
   - Automated releases
   - Environment promotion
   - Rollback strategies

3. **GitOps practices**:
   - Infrastructure as Code
   - Configuration management
   - Deployment automation
